{% extends "index" %}

{% block title %}
{% if shortcut %}
    Edit bookmark
{% else %}
    Add bookmark
{% endif %}
{% endblock title %}

{% block content %}
{% if shortcut %}
<a href="/bookmarks/{{shortcut}}" class="button" style="margin-bottom: 0.5rem;">
  <span class="material-icons mr">arrow_back</span>
  Back to bookmark
</a>
{% else %}
<a href="/bookmarks" class="button" style="margin-bottom: 0.5rem;">
  <span class="material-icons mr">arrow_back</span>
  Back to bookmarks
</a>
{% endif %}
<div class="form-container">
  <form id="add-bookmark-form">
    <label for="name">Site Name</label>
    <input type="text" id="name" name="name" value="{{ bookmark.name }}" required autofocus>
    <label for="url">URL</label>
    <input type="url" id="url" name="url" value="{{ bookmark.url }}" required>

    {% if shortcut %}
    <input type="hidden" id="shortcut" name="shortcut" value="{{ shortcut }}" maxlength="4" required>
    {% else %}
    <label for="shortcut">Shortcut</label>
    <input type="text" id="shortcut" name="shortcut" value="{{ shortcut }}" maxlength="4" pattern="[A-Za-z]{1,4}" title="Shortcut can only contain letters." required>
    {% endif %}

    <button type="submit" id="submit" class="white" style="margin-top: 2rem;">
      <span class="material-icons mr">archive</span>
      Submit
    </button>
  </form>
</div>

{% if shortcut %}
<script>
  const isEdit = true;
</script>
{% else %}
<script>
  const isEdit = false;
</script>
{% endif %}
<script>
  async function submitForm(e, form) {
    e.preventDefault();

    const btnSubmit = document.getElementById("submit");
    btnSubmit.disabled = true;
    setTimeout(() => btnSubmit.disabled = false, 2000);
    
    const data = buildJsonFormData(form);
    
    const headers = buildHeaders();
    
    console.log(data);
    const result = await submitFormData(`/bookmarks/${data.shortcut}`, headers, data.formData);
    console.log(result);
    
    if (result.status === 200) {
      alert(await result.text());
      window.location.href = `/bookmarks/${data.shortcut.toLowerCase()}`;
    } else {
      alert(await result.text())

      if (result.status === 409) {
        if (confirm("Edit existing bookmark?")) 
          window.location.href = `/bookmarks/${data.shortcut.toLowerCase()}/edit`;
      }
    }
  }

  function buildHeaders() {
    return {
      "Content-Type": "application/json"
    }
  }

  function buildJsonFormData(form) {
    let shortcut = "";
    let jsonFormData = {};
    for(const pair of new FormData(form)) {
      if (pair[0] === "shortcut") {
        shortcut = pair[1];
        continue;
      }
      jsonFormData[pair[0]] = pair[1];
    }

    return {shortcut: shortcut, formData: jsonFormData};
  }

  async function submitFormData(url, headers, data) {
    try {
      const response = await fetch(url, {
        method: isEdit ? "PATCH" : "POST",
        headers: headers,
        body: JSON.stringify(data)
      })

      return response;
    } catch(err) {
      console.error(err);
      throw err;
    }
  }

  const form = document.querySelector("#add-bookmark-form");
  if (form) {
    form.addEventListener("submit", function(e) {
      submitForm(e, this);
    });
  }
</script>
{% endblock content %}