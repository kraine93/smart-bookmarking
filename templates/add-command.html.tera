{% extends "index" %}

{% block title %}
{% if cmd %}
    Edit command
{% else %}
    Add command
{% endif %}
{% endblock title %}

{% block content %}
<a href="/bookmarks/{{shortcut}}" class="button" style="margin-bottom: 0.5rem;">
  <span class="material-icons mr">arrow_back</span>
  Back to bookmark
</a>
<div class="form-container">
  <form id="add-command-form">
    <label for="desc">Short description</label>
    <input type="text" id="desc" name="desc" value="{{ command.desc }}" required autofocus>
    <label for="path">Path</label><span class="hint"> - (use {} in place of your query!)</span>
    <input type="text" id="path" name="path" value="{{ command.path }}" placeholder="/search?query={}" required>

    {% if cmd %}
    <input type="hidden" id="command" name="command" value="{{ cmd }}" maxlength="4" required>
    {% else %}
    <label for="command">Command</label>
    <input type="text" id="command" name="command" value="{{ cmd }}" maxlength="4" pattern="[A-Za-z]{1-4}" title="Shortcut can only contain letters." required>
    {% endif %}

    <label class="checkbox-container">Set as default?
      <input type="checkbox" id="isDefault" name="isDefault">
      <span class="checkmark"></span>
    </label>

    <button type="submit" id="submit" class="white" style="margin-top: 2rem;">
      <span class="material-icons mr">archive</span>
      Submit
    </button>
  </form>
</div>

<script>
  async function submitForm(e, form) {
    e.preventDefault();

    const btnSubmit = document.getElementById("submit");
    btnSubmit.disabled = true;
    setTimeout(() => btnSubmit.disabled = false, 2000);
    
    const data = buildJsonFormData(form);
    
    const headers = buildHeaders();
    
    console.log(data);
    const result = await submitFormData(`/bookmarks/{{shortcut}}/commands/${data.command}`, headers, data.formData);
    console.log(result);
    
    if (result.status === 200) {
      alert(await result.text());
      window.location.href = `/bookmarks/{{shortcut}}`;
    } else {
      alert(await result.text())
    }
  }

  function buildHeaders() {
    return {
      "Content-Type": "application/json"
    }
  }

  function buildJsonFormData(form) {
    let command = "";
    let jsonFormData = {};
    for(const pair of new FormData(form)) {
      if (pair[0] === "command") {
        command = pair[1];
        continue;
      }
      if (pair[0] === "isDefault" && pair[1] === "on") pair[1] = true; 
      jsonFormData[pair[0]] = pair[1];
    }

    return {command: command, formData: jsonFormData};
  }

  async function submitFormData(url, headers, data) {
    try {
      const response = await fetch(url, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(data)
      })

      return response;
    } catch(err) {
      console.error(err);
      throw err;
    }
  }

  const form = document.querySelector("#add-command-form");
  if (form) {
    form.addEventListener("submit", function(e) {
      submitForm(e, this);
    });
  }
</script>
{% endblock content %}